import gql from 'graphql-tag';
import * as React from 'react';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactComponents from '@apollo/react-components';
import * as ApolloReactHoc from '@apollo/react-hoc';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
};

/** Comment */
export type Comment = {
   __typename?: 'Comment',
  author: Scalars['String'],
  content: Scalars['String'],
  id: Scalars['ID'],
};

/** Autogenerated return type of CreatePostMutation */
export type CreatePostMutationPayload = {
   __typename?: 'CreatePostMutationPayload',
  post?: Maybe<Post>,
};

/** Autogenerated return type of CreateUserMutation */
export type CreateUserMutationPayload = {
   __typename?: 'CreateUserMutationPayload',
  user?: Maybe<User>,
};

export type Mutation = {
   __typename?: 'Mutation',
  createPost?: Maybe<CreatePostMutationPayload>,
  createUser?: Maybe<CreateUserMutationPayload>,
  signIn?: Maybe<SignInMutationPayload>,
};


export type MutationCreatePostArgs = {
  title: Scalars['String'],
  content: Scalars['String'],
  url?: Maybe<Scalars['String']>
};


export type MutationCreateUserArgs = {
  email: Scalars['String'],
  name: Scalars['String'],
  password: Scalars['String']
};


export type MutationSignInArgs = {
  email: Scalars['String'],
  password: Scalars['String']
};

/** Post */
export type Post = {
   __typename?: 'Post',
  author: Scalars['String'],
  comments?: Maybe<Array<Comment>>,
  content: Scalars['String'],
  createdAt: Scalars['String'],
  id: Scalars['ID'],
  title: Scalars['String'],
  url?: Maybe<Scalars['String']>,
};

export type Query = {
   __typename?: 'Query',
  me?: Maybe<User>,
  post: Post,
  /** List all posts */
  posts?: Maybe<Array<Post>>,
};


export type QueryPostArgs = {
  id: Scalars['ID']
};

export type Session = {
   __typename?: 'Session',
  token: Scalars['String'],
  user: User,
};

/** Autogenerated return type of SignInMutation */
export type SignInMutationPayload = {
   __typename?: 'SignInMutationPayload',
  session?: Maybe<Session>,
};

export type User = {
   __typename?: 'User',
  email: Scalars['String'],
  name: Scalars['String'],
};

export type PostsQueryVariables = {};


export type PostsQuery = (
  { __typename?: 'Query' }
  & { posts: Maybe<Array<(
    { __typename?: 'Post' }
    & Pick<Post, 'title' | 'author'>
    & { comments: Maybe<Array<(
      { __typename?: 'Comment' }
      & Pick<Comment, 'author' | 'content'>
    )>> }
  )>> }
);

export type PostQueryVariables = {
  id: Scalars['ID']
};


export type PostQuery = (
  { __typename?: 'Query' }
  & { post: (
    { __typename?: 'Post' }
    & Pick<Post, 'title' | 'author'>
    & { comments: Maybe<Array<(
      { __typename?: 'Comment' }
      & Pick<Comment, 'author' | 'content'>
    )>> }
  ) }
);


export const PostsDocument = gql`
    query posts {
  posts {
    title
    author
    comments {
      author
      content
    }
  }
}
    `;
export type PostsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PostsQuery, PostsQueryVariables>, 'query'>;

    export const PostsComponent = (props: PostsComponentProps) => (
      <ApolloReactComponents.Query<PostsQuery, PostsQueryVariables> query={PostsDocument} {...props} />
    );
    
export type PostsProps<TChildProps = {}> = ApolloReactHoc.DataProps<PostsQuery, PostsQueryVariables> & TChildProps;
export function withPosts<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PostsQuery,
  PostsQueryVariables,
  PostsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PostsQuery, PostsQueryVariables, PostsProps<TChildProps>>(PostsDocument, {
      alias: 'posts',
      ...operationOptions
    });
};

/**
 * __usePostsQuery__
 *
 * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostsQuery({
 *   variables: {
 *   },
 * });
 */
export function usePostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PostsQuery, PostsQueryVariables>) {
        return ApolloReactHooks.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);
      }
export function usePostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);
        }
export type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;
export type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;
export type PostsQueryResult = ApolloReactCommon.QueryResult<PostsQuery, PostsQueryVariables>;
export const PostDocument = gql`
    query post($id: ID!) {
  post(id: $id) {
    title
    author
    comments {
      author
      content
    }
  }
}
    `;
export type PostComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PostQuery, PostQueryVariables>, 'query'> & ({ variables: PostQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const PostComponent = (props: PostComponentProps) => (
      <ApolloReactComponents.Query<PostQuery, PostQueryVariables> query={PostDocument} {...props} />
    );
    
export type PostProps<TChildProps = {}> = ApolloReactHoc.DataProps<PostQuery, PostQueryVariables> & TChildProps;
export function withPost<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PostQuery,
  PostQueryVariables,
  PostProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PostQuery, PostQueryVariables, PostProps<TChildProps>>(PostDocument, {
      alias: 'post',
      ...operationOptions
    });
};

/**
 * __usePostQuery__
 *
 * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePostQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PostQuery, PostQueryVariables>) {
        return ApolloReactHooks.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);
      }
export function usePostLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);
        }
export type PostQueryHookResult = ReturnType<typeof usePostQuery>;
export type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;
export type PostQueryResult = ApolloReactCommon.QueryResult<PostQuery, PostQueryVariables>;